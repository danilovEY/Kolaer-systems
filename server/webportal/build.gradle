group 'ru.kolaer'
version '1.0.0'

def name = "kolaer-web"
def testName = "kolaer-web-test.war"
def nameWarFile = name + ".war"

apply plugin: 'groovy'

buildscript {
    repositories {
        mavenLocal()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'io.github.robwin:swagger2markup-gradle-plugin:0.9.2'
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'
        classpath 'org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.10.1'
        classpath "gradle.plugin.org.detoeuf:swagger-codegen-plugin:1.5.1"
    }
}

dependencies {
    compile project(":api")
    compile 'commons-fileupload:commons-fileupload:1.3.2'
    compile 'commons-io:commons-io:1.3.2'
    compile "ch.qos.logback:logback-classic:1.1.3"
    compile "javax.servlet:javax.servlet-api:3.1.0"
    compile "javax.servlet:jstl:1.2"
    //compile "org.codehaus.groovy:groovy-all:2.4.6"
    compile("org.springframework.boot:spring-boot-starter-web:1.3.6.RELEASE") {
        exclude module: "spring-boot-starter-tomcat"
    }
    compile "org.springframework.security:spring-security-ldap:4.1.3.RELEASE"
    compile "org.springframework.boot:spring-boot-starter-security:1.3.6.RELEASE"
    compile "org.springframework:spring-context-support:4.3.1.RELEASE"
    compile "org.hibernate:hibernate-core:5.1.0.Final"
    compile "org.springframework:spring-orm:4.3.2.RELEASE"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-hibernate5:2.8.1"
    compile "mysql:mysql-connector-java:5.1.38"
    compile "net.sourceforge.jexcelapi:jxl:2.6.12"
    compile "org.apache.poi:poi:3.15"
    compile "io.swagger:swagger-jaxrs:1.5.10"
    compile group: 'io.springfox', name: 'springfox-swagger2', version: '2.6.1'


    testCompile "junit:junit:4.12";
    testCompile "org.springframework:spring-test:4.3.1.RELEASE"
}

war {
    archiveName = nameWarFile
    baseName = name
    webXml = file('src/main/webapp/WEB-INF/web.xml')
}

apply plugin: 'io.github.robwin.swagger2markup'
apply plugin: 'org.asciidoctor.convert'

convertSwagger2markup {
    inputDir file("docs/swagger")
    outputDir file("docs/asciidoc")
    pathsGroupedBy io.github.robwin.swagger2markup.GroupBy.TAGS
}

asciidoctor {
    dependsOn convertSwagger2markup
    backends = ['html5']
    outputDir file("src/main/webapp/asciidoc")
    sourceDir file("docs/asciidoc")
    attributes = [
            doctype: 'book',
            toc: 'left',
            toclevels: '3',
            numbered: '',
            sectlinks: '',
            sectanchors: '',
            hardbreaks: '',
            generated: file("docs/asciidoc")
    ]
}


task renameResources(dependsOn: processResources) {
    doLast{
        file("build/resources/main/database.properties").delete()
        file("build/resources/main/origin_database.properties").renameTo("build/resources/main/database.properties")
        file("build/resources/main/logback.xml").delete()
        file("build/resources/main/origin_logback.xml").renameTo("build/resources/main/logback.xml")
    }
}

task buildApp(dependsOn: [clean, renameResources, war]) {
    doLast {
        copy {
            from 'build/libs/' + nameWarFile
            into deployServerPath
        }
    }
}

task renameProject(dependsOn: clean) {
    doLast {
        war.setArchiveName(testName)
    }
}

task buildAppForTest(dependsOn: [war, asciidoctor, renameProject]) {
    doLast {
        copy {
            from 'build/libs/' + testName
            into deployServerPath
        }
    }
}